AWSTemplateFormatVersion: '2010-09-09'
Description: >
  AWS CloudFormation template to deploy an EKS cluster using two private subnets,
  a private control plane endpoint, recommended security groups, an S3 bucket with best practices
  for data storage, EKS add-ons (CoreDNS, VPC CNI, kube-proxy), and VPC creation with specified
  Availability Zones.

Parameters:
  ClusterName:
    Type: String
    Description: The name of the EKS cluster.
    Default: my-eks-cluster

  KubernetesVersion:
    Type: String
    Description: Kubernetes version for the EKS cluster.
    Default: '1.29'

  VpcCidrBlock:
    Type: String
    Description: CIDR block for the VPC.
    Default: '10.0.0.0/16'

  VpcName:
    Type: String
    Description: Name of the VPC.
    Default: 'WorkshopVPC'

  NodeGroupDesiredCapacity:
    Type: Number
    Description: Desired capacity of the node group.
    Default: 2

  NodeGroupMinSize:
    Type: Number
    Description: Minimum size of the node group.
    Default: 1

  NodeGroupMaxSize:
    Type: Number
    Description: Maximum size of the node group.
    Default: 4

  AvailabilityZone1:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: The first Availability Zone to use for subnets.
    Default: !Select [0, !GetAZs '']

  AvailabilityZone2:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: The second Availability Zone to use for subnets.
    Default: !Select [1, !GetAZs '']

Resources:
# VPC Creation
VPC:
  Type: AWS::EC2::VPC
  Properties:
    CidrBlock: !Ref VpcCidrBlock
    EnableDnsSupport: true
    EnableDnsHostnames: true
    Tags:
      - Key: Name
        Value: !Ref VpcName

# Internet Gateway
InternetGateway:
  Type: AWS::EC2::InternetGateway
  Properties:
    Tags:
      - Key: Name
        Value: !Sub "IGW_${VpcName}"

AttachGateway:
  Type: AWS::EC2::VPCGatewayAttachment
  DependsOn:
    - VPC
    - InternetGateway
  Properties:
    VpcId: !Ref VPC
    InternetGatewayId: !Ref InternetGateway

# Public Subnets
PublicSubnet1:
  Type: AWS::EC2::Subnet
  Properties:
    VpcId: !Ref VPC
    CidrBlock: !Select [0, !Cidr [!Ref VpcCidrBlock, 8, 8]]
    MapPublicIpOnLaunch: true
    AvailabilityZone: !Ref AvailabilityZone1
    Tags:
      - Key: Name
        Value: "Public Subnet 1"

PublicSubnet2:
  Type: AWS::EC2::Subnet
  Properties:
    VpcId: !Ref VPC
    CidrBlock: !Select [1, !Cidr [!Ref VpcCidrBlock, 8, 8]]
    MapPublicIpOnLaunch: true
    AvailabilityZone: !Ref AvailabilityZone2
    Tags:
      - Key: Name
        Value: "Public Subnet 2"

# NAT Gateway Elastic IPs
NatGatewayEIP1:
  Type: AWS::EC2::EIP
  Properties:
    Domain: vpc

NatGatewayEIP2:
  Type: AWS::EC2::EIP
  Properties:
    Domain: vpc

# NAT Gateways
NatGateway1:
  Type: AWS::EC2::NatGateway
  DependsOn:
    - NatGatewayEIP1
    - PublicSubnet1
  Properties:
    AllocationId: !GetAtt NatGatewayEIP1.AllocationId
    SubnetId: !Ref PublicSubnet1
    Tags:
      - Key: Name
        Value: !Sub "NAT1_${VpcName}"

NatGateway2:
  Type: AWS::EC2::NatGateway
  DependsOn:
    - NatGatewayEIP2
    - PublicSubnet2
  Properties:
    AllocationId: !GetAtt NatGatewayEIP2.AllocationId
    SubnetId: !Ref PublicSubnet2
    Tags:
      - Key: Name
        Value: !Sub "NAT2_${VpcName}"

# Private Subnets
PrivateSubnet1:
  Type: AWS::EC2::Subnet
  Properties:
    VpcId: !Ref VPC
    CidrBlock: !Select [2, !Cidr [!Ref VpcCidrBlock, 8, 8]]
    AvailabilityZone: !Ref AvailabilityZone1
    Tags:
      - Key: Name
        Value: "Private Subnet 1"

PrivateSubnet2:
  Type: AWS::EC2::Subnet
  Properties:
    VpcId: !Ref VPC
    CidrBlock: !Select [3, !Cidr [!Ref VpcCidrBlock, 8, 8]]
    AvailabilityZone: !Ref AvailabilityZone2
    Tags:
      - Key: Name
        Value: "Private Subnet 2"

# Public Route Tables
PublicRouteTable1:
  Type: AWS::EC2::RouteTable
  Properties:
    VpcId: !Ref VPC
    Tags:
      - Key: Name
        Value: !Sub "PublicRouteTable1_${VpcName}"

PublicRouteTable2:
  Type: AWS::EC2::RouteTable
  Properties:
    VpcId: !Ref VPC
    Tags:
      - Key: Name
        Value: !Sub "PublicRouteTable2_${VpcName}"

PublicRoute1:
  Type: AWS::EC2::Route
  DependsOn:
    - AttachGateway
    - PublicRouteTable1
  Properties:
    RouteTableId: !Ref PublicRouteTable1
    DestinationCidrBlock: "0.0.0.0/0"
    GatewayId: !Ref InternetGateway

PublicRoute2:
  Type: AWS::EC2::Route
  DependsOn:
    - AttachGateway
    - PublicRouteTable2
  Properties:
    RouteTableId: !Ref PublicRouteTable2
    DestinationCidrBlock: "0.0.0.0/0"
    GatewayId: !Ref InternetGateway

PublicSubnetRouteTableAssociation1:
  Type: AWS::EC2::SubnetRouteTableAssociation
  DependsOn:
    - PublicSubnet1
    - PublicRouteTable1
  Properties:
    SubnetId: !Ref PublicSubnet1
    RouteTableId: !Ref PublicRouteTable1

PublicSubnetRouteTableAssociation2:
  Type: AWS::EC2::SubnetRouteTableAssociation
  DependsOn:
    - PublicSubnet2
    - PublicRouteTable2
  Properties:
    SubnetId: !Ref PublicSubnet2
    RouteTableId: !Ref PublicRouteTable2

# Private Route Tables
PrivateRouteTable1:
  Type: AWS::EC2::RouteTable
  Properties:
    VpcId: !Ref VPC
    Tags:
      - Key: Name
        Value: !Sub "PrivateRouteTable1_${VpcName}"

PrivateRouteTable2:
  Type: AWS::EC2::RouteTable
  Properties:
    VpcId: !Ref VPC
    Tags:
      - Key: Name
        Value: !Sub "PrivateRouteTable2_${VpcName}"

PrivateRoute1:
  Type: AWS::EC2::Route
  DependsOn:
    - NatGateway1
    - PrivateRouteTable1
  Properties:
    RouteTableId: !Ref PrivateRouteTable1
    DestinationCidrBlock: "0.0.0.0/0"
    NatGatewayId: !Ref NatGateway1

PrivateRoute2:
  Type: AWS::EC2::Route
  DependsOn:
    - NatGateway2
    - PrivateRouteTable2
  Properties:
    RouteTableId: !Ref PrivateRouteTable2
    DestinationCidrBlock: "0.0.0.0/0"
    NatGatewayId: !Ref NatGateway2

PrivateSubnetRouteTableAssociation1:
  Type: AWS::EC2::SubnetRouteTableAssociation
  DependsOn:
    - PrivateSubnet1
    - PrivateRouteTable1
  Properties:
    SubnetId: !Ref PrivateSubnet1
    RouteTableId: !Ref PrivateRouteTable1

PrivateSubnetRouteTableAssociation2:
  Type: AWS::EC2::SubnetRouteTableAssociation
  DependsOn:
    - PrivateSubnet2
    - PrivateRouteTable2
  Properties:
    SubnetId: !Ref PrivateSubnet2
    RouteTableId: !Ref PrivateRouteTable2

# S3 VPC Endpoint for Private Subnets
S3VPCEndpoint:
  Type: AWS::EC2::VPCEndpoint
  DependsOn:
    - PrivateRouteTable1
    - PrivateRouteTable2
  Properties:
    VpcId: !Ref VPC
    ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
    RouteTableIds:
      - !Ref PrivateRouteTable1
      - !Ref PrivateRouteTable2
    VpcEndpointType: Gateway


  # Security Group for the EKS Cluster Control Plane
  ClusterControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EKS cluster control plane communication with worker nodes
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ClusterName}-control-plane-sg'

  # Security Group for Worker Nodes
  NodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EKS worker nodes
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ClusterName}-node-sg'

  # Ingress and Egress Rules for Security Groups

  # Control Plane to Node Communication
  ControlPlaneToNodeIngressTCP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow control plane to communicate with worker nodes (TCP 1025-65535)
      GroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535
      SourceSecurityGroupId: !Ref ClusterControlPlaneSecurityGroup

  ControlPlaneToNodeIngressUDP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow control plane to communicate with worker nodes (UDP 1025-65535)
      GroupId: !Ref NodeSecurityGroup
      IpProtocol: udp
      FromPort: 1025
      ToPort: 65535
      SourceSecurityGroupId: !Ref ClusterControlPlaneSecurityGroup

  ControlPlaneToNodeIngressICMP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow control plane to communicate with worker nodes (ICMP)
      GroupId: !Ref NodeSecurityGroup
      IpProtocol: icmp
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !Ref ClusterControlPlaneSecurityGroup

  # Node to Control Plane Communication
  NodeToControlPlaneEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow worker nodes to communicate with the control plane (TCP 443)
      GroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      DestinationSecurityGroupId: !Ref ClusterControlPlaneSecurityGroup

  # Inter-Node Communication (Optional)
  NodeToNodeIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow worker nodes to communicate with each other (All traffic)
      GroupId: !Ref NodeSecurityGroup
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !Ref NodeSecurityGroup

  # EKS Cluster Role
  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ClusterName}-eks-cluster-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 'eks.amazonaws.com'
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSVPCResourceController

  # EKS Cluster
  EKSCluster:
    Type: AWS::EKS::Cluster
    DependsOn:
    - EKSClusterRole
    - ClusterControlPlaneSecurityGroup
    - PrivateSubnet1
    - PrivateSubnet2
    Properties:
      Name: !Ref ClusterName
      Version: !Ref KubernetesVersion
      RoleArn: !GetAtt EKSClusterRole.Arn
      ResourcesVpcConfig:
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds:
          - !Ref ClusterControlPlaneSecurityGroup
        EndpointPublicAccess: false  # Control plane endpoint is private
        EndpointPrivateAccess: true  # Enable private access to the control plane
        PublicAccessCidrs: []        # Ensure no CIDRs are allowed for public access

  # Node Group Role
  NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ClusterName}-node-instance-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 'ec2.amazonaws.com'
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy

  # Launch Template for Node Group
  NodeLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub '${ClusterName}-launch-template'
      LaunchTemplateData:
        SecurityGroupIds:
          - !Ref NodeSecurityGroup
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub '${ClusterName}-node'
              - Key: eks:cluster-name
                Value: !Ref ClusterName

  # EKS Managed Node Group
  NodeGroup:
    Type: AWS::EKS::Nodegroup
    DependsOn:
    - EKSCluster
    - NodeInstanceRole
    - NodeLaunchTemplate
    Properties:
      ClusterName: !Ref EKSCluster
      NodegroupName: !Sub '${ClusterName}-nodegroup'
      ScalingConfig:
        MinSize: !Ref NodeGroupMinSize
        DesiredSize: !Ref NodeGroupDesiredCapacity
        MaxSize: !Ref NodeGroupMaxSize
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      NodeRole: !GetAtt NodeInstanceRole.Arn
      LaunchTemplate:
        Name: !Ref NodeLaunchTemplate
        Version: '$Latest'
      ReleaseVersion: '1.29.6-20240904'
      CapacityType: ON_DEMAND
      Tags:
        Name: !Sub '${ClusterName}-nodegroup'

  # S3 Bucket for Data Storage (Simulate production environment)
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'optimized-eks-bucket-${AWS::AccountId}-${AWS::Region}'
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: !Sub 'PoorlyOptimizedEKSBucket-${AWS::AccountId}-${AWS::Region}'

  # Bucket Policy to Enforce HTTPS (Secure Data in Transit)
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn:
    - S3Bucket
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: EnforceTLS
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource:
              - !Sub 'arn:aws:s3:::${S3Bucket}'
              - !Sub 'arn:aws:s3:::${S3Bucket}/*'
            Condition:
              Bool:
                'aws:SecureTransport': 'false'

  # EKS Add-ons: CoreDNS, VPC CNI, and kube-proxy

  # CoreDNS Addon
  CoreDNSAddon:
    Type: AWS::EKS::Addon
    DependsOn:
    - EKSCluster
    Properties:
      AddonName: coredns
      ClusterName: !Ref ClusterName
      ResolveConflicts: OVERWRITE

  # VPC CNI Addon
  VPCCNIAddon:
    Type: AWS::EKS::Addon
    DependsOn:
    - EKSCluster
    Properties:
      AddonName: vpc-cni
      ClusterName: !Ref ClusterName
      ResolveConflicts: OVERWRITE

  # kube-proxy Addon
  KubeProxyAddon:
    Type: AWS::EKS::Addon
    DependsOn:
    - EKSCluster
    Properties:
      AddonName: kube-proxy
      ClusterName: !Ref ClusterName
      ResolveConflicts: OVERWRITE

Outputs:
  ClusterName:
    Description: Name of the EKS cluster
    Value: !Ref ClusterName

  ClusterEndpoint:
    Description: Endpoint of the EKS cluster (private)
    Value: !GetAtt EKSCluster.Endpoint

  ClusterVersion:
    Description: Kubernetes version of the EKS cluster
    Value: !GetAtt EKSCluster.Version

  S3BucketName:
    Description: Name of the S3 bucket
    Value: !Ref S3Bucket

  VpcId:
    Description: "VPC ID of the environment."
    Value: !Ref VPC

  VpcCidrBlock:
    Description: "IP block used in the VPC."
    Value: !GetAtt VPC.CidrBlock

  PublicSubnets:
    Description: "Public subnet IDs."
    Value:
      Fn::Join:
        - ","
        - [!Ref PublicSubnet1, !Ref PublicSubnet2]

  PrivateSubnets:
    Description: "Private subnet IDs."
    Value:
      Fn::Join:
        - ","
        - [!Ref PrivateSubnet1, !Ref PrivateSubnet2]

  NatGatewayId:
    Description: "ID of the NAT Gateway"
    Value: !Ref NatGateway

  S3EndpointId:
    Description: "ID of the S3 VPC Endpoint"
    Value: !Ref S3VPCEndpoint